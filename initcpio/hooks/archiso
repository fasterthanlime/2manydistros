# Initialize loopback device logic (we using on-demand mode)
# args: none
_init_loop_dev() {
    loop_dev_count=99
    loop_dev_range=$(cat /sys/block/loop0/range)
    loop_dev_minor=$((loop_dev_count*loop_dev_range))
}

# Call this function before _make_loop_dev() each time.
# args: none
_next_loop_dev() {
    loop_dev_count=$((loop_dev_count+1))
    loop_dev_minor=$((loop_dev_count*loop_dev_range))
}

# Setup a loopback device for image passed as argument and echo the path to loopback device used.
# args: /path/to/image_file
_make_loop_dev() {
    local img="${1}"
    mknod /dev/loop${loop_dev_count} b 7 ${loop_dev_minor} &> /dev/null
    losetup /dev/loop${loop_dev_count} "${img}" &> /dev/null
    echo /dev/loop${loop_dev_count}
}

# args: source, mountpoint
_mnt_fs() {
    local img="${1}"
    local mnt="${2}"
    local img_fullname="${img##*/}";
    local img_name="${img_fullname%%.*}"
    local dm_snap_name="${dm_snap_prefix}_${img_name}"
    local ro_dev ro_dev_size ro_dev_fs_type rw_dev

    mkdir -p "${mnt}"

    _next_loop_dev
    ro_dev=$(_make_loop_dev "${img}")
    ro_dev_size=$(blockdev --getsz ${ro_dev})
    ro_dev_fs_type=$(blkid -o value -s TYPE -p ${ro_dev} 2> /dev/null)

    dd of="/cowspace/${img_name}.cow" count=0 seek=${ro_dev_size} &> /dev/null
    _next_loop_dev
    rw_dev=$(_make_loop_dev "/cowspace/${img_name}.cow")

    echo "0 ${ro_dev_size} snapshot ${ro_dev} ${rw_dev} N 8" | dmsetup create ${dm_snap_name}

    msg ":: Mounting '/dev/mapper/${dm_snap_name}' (${ro_dev_fs_type}) to '${mnt}'"
    if ! mount -t "${ro_dev_fs_type}" "/dev/mapper/${dm_snap_name}" "${mnt}" ; then
        echo "ERROR: while mounting '/dev/mapper/${dm_snap_name}' to '${mnt}'"
        launch_interactive_shell
    fi
}

# args: /path/to/image_file, mountpoint
_mnt_sfs() {
    local img="${1}"
    local mnt="${2}"
    local img_fullname="${img##*/}";

    mkdir -p "${mnt}"

    if [[ "${copytoram}" == "y" ]]; then
        msg -n ":: Copying squashfs image to RAM..."
        if ! cp "${img}" "/copytoram/${img_fullname}" ; then
            echo "ERROR: while copy '${img}' to '/copytoram/${img_fullname}'"
            launch_interactive_shell
        fi
        img="/copytoram/${img_fullname}"
        msg "done."
    fi
    _next_loop_dev
    msg ":: Mounting '${img}' (SquashFS) to '${mnt}'"
    if ! mount -r -t squashfs $(_make_loop_dev "${img}") "${mnt}" &> /dev/null ; then
        echo "ERROR: while mounting '${img}' to '${mnt}'"
        launch_interactive_shell
    fi
}

_verify_checksum() {
    local _status
    cd "/bootmnt/${archisobasedir}"
    md5sum -c checksum.md5 > /checksum.log 2>&1
    _status=$?
    cd "${OLDPWD}"
    return ${_status}
}


run_hook() {
    modprobe loop

    [[ -z "${arch}" ]] && arch="$(uname -m)"
    [[ -z "${cowspace_size}" ]] && cowspace_size="75%"
    [[ -z "${copytoram_size}" ]] && copytoram_size="75%"
    [[ -z "${archisobasedir}" ]] && archisobasedir="arch"
    [[ -z "${dm_snap_prefix}" ]] && dm_snap_prefix="arch"
    [[ -z "${archisodevice}" ]] && archisodevice="/dev/disk/by-label/${archisolabel}"
    if [[ -z "${aitab}" ]]; then
        aitab="/bootmnt/${archisobasedir}/aitab"
    else
        aitab="/bootmnt/${aitab}"
    fi
    # set mount handler for archiso
    mount_handler="archiso_mount_handler"
}

# This function is called normally from init script, but it can be called
# as chain from other mount handlers.
# args: /path/to/newroot
archiso_mount_handler() {
    local newroot="${1}"
    local fstype fserror

    _init_loop_dev

    msg ":: Waiting for boot device..."
    while ! poll_device "${archisodevice}" 30; do
        echo "ERROR: boot device didn't show up after 30 seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    done

    fstype=$(blkid -o value -s TYPE -p "${archisodevice}" 2> /dev/null)
    if [[ -n "${fstype}" ]]; then
        if mount -r -t "${fstype}" "${archisodevice}" /bootmnt; then
            if [[ -f "${aitab}" ]]; then
                msg ":: Mounted archiso volume successfully."
                fserror=0
            else
                echo "ERROR: Mounting was successful, but the '${aitab}' file does not exist."
                fserror=1
            fi
        else
            echo "ERROR; Failed to mount '${archisodevice}' (FS is ${fstype})"
            fserror=1
        fi
    else
        echo "ERROR: '${archisodevice}' found, but the filesystem type is unknown."
        fserror=1
    fi

    if [[ ${fserror} -eq 1 ]]; then
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi

    if [[ "${checksum}" == "y" ]]; then
        if [[ -f "/bootmnt/${archisobasedir}/checksum.md5" ]]; then
            msg -n ":: Self-test requested, please wait..."
            if _verify_checksum; then
                msg "done. Checksum is OK, continue booting."
            else
                echo "ERROR: one or more files are corrupted"
                echo "see /checksum.log for details"
                launch_interactive_shell
            fi
        else
            echo "ERROR: checksum=y option specified but checksum.md5 not found"
            launch_interactive_shell
        fi
    fi

    if [[ "${copytoram}" == "y" ]]; then
        msg -n ":: Mounting /copytoram (tmpfs) filesystem, size=${copytoram_size}..."
        mount -t tmpfs -o "size=${copytoram_size}",mode=0755 copytoram /copytoram
        msg "done."
    fi

    msg -n ":: Mounting /cowspace (tmpfs) filesystem, size=${cowspace_size}..."
    mount -t tmpfs -o "size=${cowspace_size}",mode=0755 cowspace /cowspace
    msg "done."

    local aitab_img aitab_mnt aitab_arch aitab_sfs_comp aitab_fs_type aitab_fs_size
    while read aitab_img aitab_mnt aitab_arch aitab_sfs_comp aitab_fs_type aitab_fs_size; do
        [[ "${aitab_img#\#}" != "${aitab_img}" ]] && continue
        [[ "${aitab_arch}" != "any" && "${aitab_arch}" != "${arch}" ]] && continue
        if [[ "${aitab_fs_type}" != "none" ]]; then
            if [[ "${aitab_sfs_comp}" != "none" ]]; then
                _mnt_sfs "/bootmnt/${archisobasedir}/${aitab_arch}/${aitab_img}.fs.sfs" "/sfs/${aitab_img}"
                _mnt_fs "/sfs/${aitab_img}/${aitab_img}.fs" "${newroot}${aitab_mnt}"
            else
                _mnt_fs "/bootmnt/${archisobasedir}/${aitab_arch}/${aitab_img}.fs" "${newroot}${aitab_mnt}"
            fi
        else
            _mnt_sfs "/bootmnt/${archisobasedir}/${aitab_arch}/${aitab_img}.sfs" "${newroot}${aitab_mnt}"
        fi
    done < "${aitab}"

    if [[ "${copytoram}" == "y" ]]; then
        umount /bootmnt
    else
        mkdir "${newroot}/bootmnt"
        mount --bind /bootmnt "${newroot}/bootmnt"
    fi
}

# vim:ft=sh:ts=4:sw=4:et:
